(in_dtCurrentSheet.rows(j).item(0).ToString <> "") and (in_dtCurrentSheet.rows(j).item(7).tostring.Replace("$", "").IsNumeric or in_dtCurrentSheet.rows(j).item(7).tostring.contains("$"))

<wnd app='excel.exe' cls='XLMAIN' title='123BotOutput.xls  -  Compatibility Mode - Excel' />
<uia automationid='123BotOutput.xls' cls='ExcelBookTabControl' name='123BotOutput' />
<uia automationid='SheetTab' name='{{strSheetName}}' role='Sheet Tab' />

List<string>(2)
{
  "H18",
  "J25"
}

The following cards


These cards got reassigned to the Verkada user Lost Cards last weekend when Eric and Jay were cleaning up the users and making sure that users had only one card assigned.
191
    Deactivated
152
    Deactivated
47
    Deactivated
10
    Deactivated

I'm looking into which account exactly they belonged to. Going to take more time.


List of the something something

List of the URLs to find the reports that need updates on them.

New Dictionary(of String, String)
{
{"Table HD_Ticket 2022",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=&SEARCH_SELECTION_TEXT=table+HD_Ticket+2022&SEARCH_SELECTION=table+HD_Ticket+2022"},
{"Table USER",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=&SEARCH_SELECTION_TEXT=table+USER&SEARCH_SELECTION=table+USER"},
{"Table HD_WORK 2022",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=Service+Desk&SEARCH_SELECTION_TEXT=table+HD_WORK+2022&SEARCH_SELECTION=table+HD_WORK+2022"}
}


Tips to make better workflows using UiPath

RPA is taking hte world by storm. It allows the companies to automate mundane taks so that their resources could focus on something more important. This is beneficial not only for the company but also allows the employee to get their hands dirty in other areas of the industry as well.

Tools such as uiPath not only...

Here are some of the tips that could help you make yoru workflows more efficient -

#1 Using Global variables.

If you have any experience in programming, then you know the importance of global variables. While creating workflows we usually pass all the required variables as arguments to different workflows. The flaw with this approach is that if there is a small change in arguments of any one of the workflow, then all other workflows where it was called have to be modified.

In order to introduce global variable functionality in our workflow, we can use the Getter Setter activity.

It's looking like that's not in modern... Which is NOT a good sign!!!!


https://docs.uipath.com/studio/docs/test-activities

Test Activities

The Test Activity context menu option of the Designer panel is used for running a test of the currently selected activity. When clicked, the Locals panel opens displaying the variables and arguments in scope.

Test Activity can be used in two ways:

    Add default values to properties and test

    Add arguments and/or properties to activity properties and use the Local panel to add values after clickign the Test Activity option.

Double-click on the value field of a variable or argument or click the edit icon in the Locals pane, and add a new value. Next, click Step Into to focus and execute the activity, and monitor the variable or argument's value in the Locals panel.

The same is available when clickign Continue, but the variables are not visible in the Locals Panel.

Please take into consideration that dynamic checks when variabels depend on other variables that are defined later are not supported.

Execution logs generated by the Test Activity action are visible in the Output panel. Exceptions in Studio can be bubbled up, which means that the exception may be passed to parent containers in case it may be handled by them.

The Test Activity option is not available during debugging.

Example of Using Test Activity

For the If Activity, we created a process that asks the user for two numbers, checks to see if one is divisible by the otgher, and depending on the result, displays a different message in the Output panel.

To check the behavior of the If activity defined in the process, use the Test Activity option, as illustrated below:

The Test Activity action places the activity in the debugger and asks you for values to variables. Once provided, click the Continue button for the debugging process to continue. In this particular case, a message was written in the Output panel with the correct answer, which means that the expressions written in the If activity were correct.

Create Test Bench

The Create Test Bench option allows for the creation of automation building blocks, which can then be tested and added to the final workflow.

It is sued for testing activities, working with variables, and debugging the process. All this is done in a test bench workflow, a temporary sequence that's not part of the current proejct and that is discarded when closed.

The Create Test Bench option is similar to the Test Activity option, with the exception that the latter is contained and defined in an actual workflow.

To use the Create Test Bench option, go to the Activities panel search bar or use [the] Ctrl + Alt + F keyboard shortcut. Type the name of hte activity and right-click to open the context menu.

Select Create Test Bench[,] and the activity is automatically added to a sequence fiel not included in your project. From there yu can add other activities, chagne their default properties, and debug the process. The Output panel displays any logs or error found during debugging.

To save the file to your project, simplu use the ribbon option Save as, add a file name, and save it to the same file path as your project.

Please note that teh Create Test Bench does not work with the Pick Branch activity.

Run to this Activity

The Run to this Activity option is avialable when right-clicking an activity in the Designer panel.

This option starts the debugging process and pauses before teh selected activity is executed while highlighting it in the panel. If Run to this Activity is triggered when debugging is already paused, the execution continues until the activity is reached.

Run from this Activity

The Run from this Activity context menu option enters debugging in a paused state, allowing you to make changes to teh values of variables and arguments from the Locals Panel. Press Continue to start debugging or use actions such as Step Into, Step Over, Step Out.

Note:
An error occurs if you use Run from this Activity for an activity added inside one of the following container activities: Try Catch, Switch, Parallel, Pick, Trigger Scope, or Retry Scope.



https://docs.uipath.com/studio/docs/debugging-actions

Debugging Actions

Debugging of a single file or the whole project can be performed both form the Design or Debug ribbon tabs. However, the debugging process is not available if hte project files have validation errors.

Step Into

Use Step Into to debug activities one at a time. When this action is triggered, the debugger opens and highlights hte activity before it is executed.

When Step Into is used with Invoke Workflow File activities, the workflow is opened in a new tab in ReadOnly mode and each activity is executed one by one.

The keyboard shortcut for Step Into is F11.

Step Over

Unlike the Step Into action, Step Over does not open the current container. When used, the action debugs the next activity, highlighting containers (such as flowcharts, sequences or Invoke Workflow File activities) without opening thme.

This action comes in handy for skipping analysis of large containers which are unlikely to trigger any issues during execution.

Step Over is available using the F10 keybaord shortcut.

Step Out

As the name suggests, this action is used for stepping out and pausing the execution at the level of the current container. Step Out completes the execution activities of the current container before pausing the debugging. This option works well with nested sequences.

Step out is available using the Shift + F11 keyboard shortcut.

Retry

Retry re-executes the previous activity, and throws the exception if it's encountered again. The activity which threw the exception is highlighted and details about the error are shown in the Locals adn Call Stack Panels.

Ignore

The Ignore action can be used to ignore an encountered exception and continue the execution from the next activity so that the rest of the workflow can be debugged.

This action is useful when jumping over the activity that threw the exception and continuing debugging the remaining part of the project.

Restart

Restart is available after an exception was thrown and the debug process is paused. The action is used after restarting the debugging process from the first activity of the project. Use Slow Step to slow down the debugging speed and properly inspect activities as they are executed.

Please take into consideration that when using this option after using hte Run from this Activity action, the debugging is restarted from the previously indicated activity.

Break

Break allows you to pause the debugging process at any given moment. The activity which is being debugged remains highlighted when paused. Once this happens, you can choose to Continue, Step Into, Step Over, or Stop the debugging process.

It is recommended to use Break along with Slow Step so that you know exactly when debugging needs to be paused.

An alternative to using Slow Step in this situation is to keep an eye on the Output panel an duse Break on the activity that is currently being debugged.

Focus

Focus Execution Point helps you return to the current breakpoint or the activity that caused an error during debugging. The Focus button is used after navigating through the process, as an easy way to return to the activity that caused the error and resumes the debugging process.

Alternatively, when debugging is paused because a breakpoint was reached, Focus can be used for returning to said breakpoint, after navigating through activities contained in the automation process.

A third case is when the debugging is paused either after usign Step Into or Step Over and then navigating through the process. In this case, Focus returns to teh activity that paused the debugging process.

From the Breakpoints context menu, you can select focus to highlight the activity with the breakpoint.

Slow Step

Slow Step enables you to take a closer look at any activity during debugging. While this action is enabled, activities are highlighted in the debugging process. Moreover, containers such as flowcharts, sequences, or Invoke Workflow File activities are opened. This is simiar to using Step Into, but without having to pause the debugging process.

Slow Step can be activated both before or during the debugging process. Activating teh action does not pause debugging.

Although called Slow Step, the action comes with 4 different speeds. The selected speed step runs the debugging process slower than the previous one. For example, debugging with Slow Step at 1x runs it the slowest, and fastest at 4x. In other words, the speed dictates how fast teh debugger jumps from one activity to the next.

Each time you click Slow Step the speed changes by one step. You can easily tell by the icon, which updates accordingly.

Execution Trail

The Execution Trail ribbon button is disabled by default. When enabled, it shows the exact execution path at debugging. As the process is executed, each activity is highlighted and marked in the Designer panel, showing you the execution as it happens.

    executed activities are marked and highlighted in green.

    activities that were not executed are not marked in any way.

    activities that threw an exception are marked and highlighted in red.

https://docs.uipath.com/activities/docs/retry-scope

Retry Scope

UiPath.Core.Activities.RetryScope

Retries the contained activities as long as the condition  is not met or an error is thrown.

Important! Due to internal changes, this activity will no longer be visible in the Favorites list when upgrading to v20.4 or newer, if it was added to the Favorites list with a 19.4 or older version of UiPath.System.Activities.

Properties
Options
    NumberofRetries - The number of times that teh sequence is to be retried.

    RetryInterval - Specifies the amount of time (in seconds) between each retry.

Common
    DisplayName - The display name of this activity
    ContinueOnError - Specifies if the automation should continue even when the activity throws an error. This field only supports Boolean values (True, False). The default value is False. As a result, if the field is blank and an error is thrown, the execution of the project stops. If the value is set to True, the execution of the project continues regardless of any error.

Note:
If this activity is included in Try Catch and the value of ContinueOnError is True, no error is caught when the project is executed.

Misc
Private - If selected, the values of variables and arguments are no longer logged at Verbose level.

The Retry Scope activity is used for catching and handling an error, which is why it's similar to the Try Catch one. The following workflow attempts to open the Notepad window 3 times and uses the condition set in the Retry Scope activity to stop the loop.

    1. Create a new sequence and add the Retry Scope activity.
    2. In the Properties panel, leave the default NumberOfRetries of 3 and the Retry Interval of 5. This means that we attempt to open the Notepad window 3 times and the interval between tries is 5 seconds.
    3. In the Action section, add an Assign activity.
    4. Create a GernericValue variable, named for example Random and add it to the To field of the Assign activity.
    5. Add the Now.Millisecond mod 5 value to the variable by adding it to the Value field of the Assign activity.
    6. Add an if activity and as a condition enter Random <> 0. This means that you check if your variable is different than 0.
    7. In the Then section of this activity (the condition above is true):
        Add a Message Box stating "Notepad Window failed to start.".
        Under the Message Box, add a Throw activity to throw an error.
        Type in New System.Exception("Notepad failed to start.") in the Exception field, under Properties.
    8. In the Else section of the If activity (the condition above is false):
        Add an Open Application activity and indicate Notepad on the screen. Provide the full path of the Notepad executable file in the FileName field part of Properties.
    9. To exit the loop, add an Element Exists activity in the Condition section of Retry Scope and indicate the Notepad window.

This workflow simulates a failing Notepad window. If the value of the Random variable is 0 three times in a row, the "Notepad Window Failed to start" message is displayed every time and the entire workflow fails with the "Notepad failed to start" error. The latter message is the one added in the Throw activity.

If the value of the Random variable is 0, the Robot opens Notepad and because the exist condition of this loop is to find the Notepad window, teh workflow is successfully completed.

"<uia automationid='Grid' name='Grid' role='data grid' />
<uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' tableCol='39' tableRow='1' />"



TargetAnchorable { Accuracy=0.8, Anchor0=null, Anchor1=null, Anchor2=null, Anchor3=null, AnchorCount=0, Anchors=null, BrowserURL=null, CheckVisibility=false, ContentHash=null, DesignTimeRectangle=[{X=2414,Y=235,Width=64,Height=17}], ElementType=Cell, FriendlyName="'https://hemic365-my.sha…'", FullSelector="<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' /><uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' tableCol='39' tableRow='1' />", FullSelectorArgument=InArgument<string> { ArgumentType=[System.String], Direction=In, EvaluationOrder=-1, Expression=[<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' tableCol='39' tableRow='1' />], Expression=[<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' tableCol='39' tableRow='1' />] }, FuzzyAccuracy=0.5, FuzzyPartialSelector="<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' />", FuzzySelector="<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' /><uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' />", FuzzySelectorArgument=InArgument<string> { ArgumentType=[System.String], Direction=In, EvaluationOrder=-1, Expression=[<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' />], Expression=[<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' />] }, Guid="9025c745-569d-4cfc-9a2c-12075e244398", Id="fc575b1c-3dd6-4698-abac-09e580bc552d", ImageBase64="", InformativeScreenshot="16ea0291930b4545f79e00d365eab6a3.png", IsInApplicationCardSingleWindow=false, IsNativeTextCaseSensitive=false, IsOffsetPointEnabled=false, IsResponsive=false, NativeText=null, NativeTextArgument=null, OCRAccuracy=0.7, OCRText=null, OwnerTarget=TargetAnchorable { ... }, OwnerTarget=TargetAnchorable { ... }, PartialSelector="<uia automationid='Grid' name='Grid' role='data grid' /><uia automationid='BA1' name='&quot;B&quot; &quot;A&quot; 1' role='item' tableCol='39' tableRow='1' />", PointOffset=null, PositioningType=Default, Reference=null, ScopeSelector="<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' />", ScopeSelector="<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' />", ScopeSelectorArgument=InArgument<string> { ArgumentType=[System.String], Direction=In, EvaluationOrder=-1, Expression=[<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' />], Expression=[<wnd app='excel.exe' cls='XLMAIN' title='*.xlsx - Excel' />] }, SearchSteps=Selector, SelectionStrategy=Default, TargetType=SelectorBased, TelemetryData=null, Text=null, TextMethod=None, TextSelector=null, WaitForReady=Interactive, WaitForReadyArgument=null }


https://hemic365-my.sharepoint.com/personal/jayoshimi_hemic_com/Documents/Documents/UiPath/UiPathAutomations/ReportFormatting/copyTEST%20H%20Path%20TWO.xlsx?web=1

https://docs.aws.amazon.com/vpc/latest/privatelink/endpoint-services-overview.html

AWS PrivateLink and VPC endpoints

AWS PrivateLink is a highly available, scalable technology that enables you to privately connect your VPC to supported AWS services, services hosted by other AWS accounts (VPC endpoint services), and supported AWS Marketplace partner services. You do not need to use an internet gateway, NAT device, public IP address, AWS Direct Connection connection, or AWS Site-to-Site VPN connection to communicate with the service. Therefore, you control the specific API endpoints, sites, and services that are reachable from your VPC.

You can create your own VPC endpoint service, powered by AWS PrivateLink, and enable other AWS customers to access your service.

VPC endpoing concepts

The following are key concepts for VPC endpoints:

    VPC endpoint - The entry point in your VPC that enables you to connect privately to a service. The following are the different types of VPC endpoints. You create the type of VPC endpoint required by the supported service.

        Gateway Endpoint
        Interface Endpoint
        Gateway Load Balancer Endpoint

    Endpoint service - Your own application or service in your VPC. Other AWS principals can create an endpoint from their VPC to your endpoint service.

To use AWS PrivateLink, create a VPC endpoint for a service in your VPC. You create the type of VPC endpoing required by the supported service. This creates an elastic network interface in your subnet with a private IP address that serves as an entry point for traffic destined to securely connect your PVC to an AWS service that supports AWS PrivateLink.

Work with VPC Endpoints

You can create, acces, and manage VPC endpoints using any of the following:

    AWS Management Console - Provides a web interface that you can se to access your AWS PrivateLink resources.

    AWS Command Line Interfrace (AWS CLI) - Provides commands for a broad set of AWS services, including AWS PrivateLink. For more information about commands for AWS PrivateLink, see ec2 in the AWS CLI Command Reference.

    AWS CloudFormation - Create templates that describe your AWS resources. You can use teh templates to provision and manage those resources in a single unit. For more information, see the following AWS PrivateLink resources:
        AWS::EC2::VPCEndpoint
        AWS::EC2::VPCEndpointConnectionNotification
        AWS::EC2::VPCEndpointService
        AWS::EC2::VPCEndpointServicePermissions
        AWS::ELasticLoadBalancingV2::LoadBalancer

    AWS SDKs - Provide Language-specific APIs. The SDKs take care of many of the connection detils, such as calculating signatures, handling request retries, and handling errors. For more information, see AWS SDKs.

    Query API - Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as genearting hte hash to sign the request and handling errors. For more information, see AWS PrivateLink actions in teh Amazon EC2 API Refrence.

Example Endpoint Configurations

For information about AWS PrivateLink and VPC peering examples, see Examples: SErvices using AWS PrivateLink and VPC peering in the Amazon VPC User Guide.

Pricing for endpoints

For information about pricing, see AWS PrivateLink Pricing.

https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints.html

VPC Endpoints

A VPC endpoint enables connections between a virtual private cloud (VPC) and supported services, without requiring you use an internet gateway, NAT Device, VPN connection, or AWS DirectConnect connection. Therefore, you control the specific API endpoints, sites, and services that are reachable from your VPC.

VPC endpoints are virtual devices. They are horizontally scaled, redundant, and highly available VPC components. The following are the different types of VPC endpoints. You create the type of VPC endpoint that's required by the supported service.

Interface endpoints

An interface endpoint is an elastic network interface with a private IP address from the IP address range of your subnet. It serves as an entry point for traffic destined to a service that is owned by AWS or owned by an AWS customer or partner. For a list of AWS services that integrate with AWS PrivateLink, see AWS services that integrate with AWS PrivateLink.

You are billed for hourly usage and data processing charges. For more information, see Interface Endpoint pricing.

Gateway Load Balancer endpoints

A Gateway Load Balancer endpoint is an elastic network interface with a private IP address from the IP address range of your subnet. It serves as an entry point to intercept traffic and route it to a network for security service that you've configured using a Gateway Load Balancer. You specify a Gateway Load Balancer endpoint as a target for a route in the route table. Gateway Load Balancer endpoints are supported only for endpoint services that are configured usin ga Gateway Load Balancer.

You are billed for hourly usage and data processing charges. For more information, see Gateway Load Balancer endpoint pricing.

Gateway endpoints

A gateway endpoint is a gateway that is a target for a route in your route table used for traffic destined to either Amazon S3 or DynamoDB.

There is no charge for using gateweay endpoints.

Amazon S3 supports both gateway endpoints and interface endpoints. For a comparison of the two options, see Types of VPC endpoints for Amazon S3 in the Amazon S3 User Guide.

https://docs.aws.amazon.com/vpc/latest/privatelink/vpce-interface.html

An interface VPC endpoint (interface endpoint) allows you to connect to services powered by AWS PrivateLink. These services include some AWS services, services hosted by other AWS customers and Partners in their own VPCs (referred to as endpoint services), and supported AWS Marketplace Partner services. The owner of the service is the service provider, and you, as the principal creating the interface endpoint, are the service consumer.

The following are the general steps for seting up an inteface endpoint:

    1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.

    2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. An endpoint network interface is assigned a private IP address from the IP address range of your subnet, and keeps this IP address until the interface endpoint is deleted. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet you specify.

    Note.
    An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Requester-managed network interfaces.

    3. Specify the security groups to associate with the endpoint network interface. The security group reules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate teh default security group for the VPC.

    4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint so you can make requests to the service using its default DNS hostname.

    Important:
    Private DNS is turned on by default for endpoints created for AWS service and AWS Marketplace Partner services.
    Private DNS is turned on in the other subnets which are in the same VPC and Availability Zone or Local Zone.

    5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availaibilty Zone IDs to identify the interface endpoint Availability Zone.

    6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically. For more information about the lifecycle of the endpoint, see Interface Endpoint lifecycle.

Services cannot initiate requests to requests in your VPC through the endpoint. An endpoint only returns responses to traffic that is initiated from resources in your VPC. Before you integrate a service and an endpoint, review the service-specific VPC endpoint documentation for any service-specific configuration and limitations.

...

Interface endpoint properties and limitations

To use interface endpoints, you need to be aware of their properties and current limitations:

    For each interface endpoint, you can choose only one subnet per availability zone.

    Services might not be available in all Availability Zones through an interface endpoint. To find out which Availability Zones are supported, use the describe-vpc-endpoint-services command or use the Amazon VPC console. For more information, see Create an interface endpoint.

    When you create an interface endpoint, the endpoint is created in the Availability Zone that is mapped to your account and that is independent from other accounts. When the service provider and the consumer are in different accounts, see Interface Endpoint Availability Zone considerations for information about how to use Availibility Zone IDs to identify the interface endpoint Availability Zone.

    When the service provider and the consumer have different accounts and us multiple Availability Zones, and the consumer views the VPC endpoint service information, the response only includes the common Availabilty Zones. For example, when the service provider account uses us-east-1a and us-east-1c and the consumer users us-east-1a and us-east-1b, the response includes the VPC endpoint services in teh common Availability Zone, us-east-1a.

    By default, each interface endpoint can support a bandwidth of up to 10 Gbps per Availability Zone and automatically scales up to 40 Gbps. If your application needs higher throughput per zone, contact AWS support.

    If the network ACXL for your subnet restricts traffic, you might be able to send traffic through the ndpoint netowrk interface. Ensure that you add appropriate rules that allow traffic to and from teh CIDR block of the subnet.


https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99

Higher Order Functions (Composing Software)

Note: This is part of the "Composing Software" series (now a book!) on learning functional programming and compositional software techniques in JavaScriptES6+ from the ground  up. Stay tuned. There's a lot more of this to come!

A higher order function is a function that takes a function as an argument or returns a function. Higher order function is in contrast to first order functions, which don't take a function as an argument or return a function as an output.

Earlier, we saw examples of .map() and .filter(). Both of them take a function as an argument. They're both higher order functions.

Let's look at an example of a first-order function which filters all the 4-letter words from a list of words:

    const censor = words => {
        const filtered = [];
        for (let i=0, { length } = words; i < length; i++) {
            const word = words[i];
            if (word.length !==4) filtered.push(word);
        }
        return filtered;
    };

    censor(['oops', 'gasp', 'shout', 'sun']);
    // ['shout', 'sun']


Now, what if we want to select all the words that begin with 'S'? We could create another function:

    const startsWiths = words => {
        const filtered = [];
        for (let i=0, { length } = words; i < length; i ++) {
            const word = words[i];
            if (word.startsWith('s')) filtered.push(word) ;
        }
        return filtered;
    }

    startsWithS(['oops', 'gasp', 'shout', 'sun']);
    // ['shout', 'sun']

You may already be recognizing a lot of repeated code. There's a pattern forming here that could be abstracted into a more generalized solution. These two functions have a whole lot in common. They both iterate over a list and filter it on a given condition.

Both the iteration and the filtering seem like they're begging to be abstracted so they can be shared adn reused to build all sorts of similar functions. After all, selecting things form lists of things is a very common task.

Luckily for us, JavaScript has first class functions. What does that mean? Just like numbers, strings, or objects, functions can be:

    Assigned as an identifier (variable) value
    Assigned to object property values
    Passed as arguments
    Returned from functions

Basically, we can use functions just like any other bits of data in our programs, and that makes abstraction a lot easier. For instance, we can create a function that abstracts the process of iterating over a list and accumulating a return value by passing in a function that handles the bits that are different. We'll call that function reducer:

    const reduce = (reducer, initial, arr) => {
        //shared stuff
        let acc = initial;
        for (let i = 0, { length } = arr; i < length; i++) {

            //unique stuff in reducer() call
            acc = reducer(acc, arr[i]);

        //more shared stuff
        }
        return acc;
    };

    reduce((acc, curr)) => acc + cur, 0, [1,2,3]); // 6

This reduce() implementation takes a reducer function, an intial value for the accumulator, and an array of data to iterate over. For each item in hte array, the reducer is called, passing it the accumulator and the current arrray element. The return value


https://forum.uipath.com/t/whitelisting-requirements-for-uipath-studio-and-uipath-robot/307527
Whitelisting Requirements For UiPath Studio and UiPath Robot

What are the whitelisting requirements for UiPath Studio and UiPath Robot?

Reason and Intention: the purpose of this guide is to document the whitelisting requirements for UiPath Studio and UiPath Robot in desktop environments where there is strict enforcement of Group Policies that prevent UiPath Studio and UiPath Robot from functioning properly. This document aims to highlight the whitelisting requirements when the following restrictions are put in place:

    1. Prevention of any executable (.exe) file from being executed when the file is not residing in "C:\Program Files" or "C:\Program Files (x86)"
    2. Prevention of extensions from being loaded on Google Chrome and Microsoft Edge (Chromium)

The whitelisting is not something



https://docs.aws.amazon.com/whitepapers/latest/using-power-bi-with-aws-cloud/the-microsoft-power-bi-suite.html
The Microsoft Power BI Suite

To reduce confusion due to product naming similarities, this whitepaper presents what each Microsoft Power BI product and service is.

Power BI Desktop

Power BI Desktop is a free application you install on your local computer. It lets you connect to, transform, and visualize your data. With Power BI Desktop, you can connect to multiple different sources of data and combine them (often called modeling) into a data model. This data model lets you build visuals and collections of visuals you can share as reports inside your organization.

...

Power BI Service

Power BI is a collection of software services, apps, and connectors that work together to help you create, share, and consume business insights in a way that serves you and your business more effectively.

The Power BI Service is a cloud-based service. It supports light report editing and collaboration for teams and organizations. You can connect to data sources in teh Power BI service too, but modeling is limited.


https://docs.aws.amazon.com/controltower/latest/userguide/what-is-control-tower.html

What is AWS Control Tower?

AWS Control Tower offers a straightforward way to set up and govern an AWS multi-account environment, following precriptive best practices. AWS Control Tower orchestrates the capabilities of several other AWS services, including AWS Organizations, AWS Service Catalog, and AWS Single Sign-on, to build a landing zone in less than an hour. Resources are set up and managed on your behalf.

AWS Control Tower orchestration extends the capabilities of AWS Organizations. To help keep your organizations and accounts from drift, which is divergence from best practices, AWS Control Tower applies preventive and detective controls (guardrails). For example, you can use guardrails to help ensure that security logs and necessary cross-account access permissions are created, and not altered.

...

Features

AWS Control Tower has the following features:

    Landing Zone - A landing zone is a well architectured, multi-account environment that's based on security and compliance best practices. It is the enterprise-wise container that hold all of your organizational units (OUs), accouts, users, and other resources that you want to be subject to compliance regulation. A landing zone can scale to fit the needs of an enterprise of any size.

    Guardrails - A guardrail is a high-level rule that provides ongoing governance for your overall AWS environment. It's expressed in plain language. Two kinds of guardrails exist: preventative and detective. Three categories of guidance apply to the two kinds of guardrails: mandatory, strongly recommended, and elective. For more information about guardrails, see How Guardrails work.

    Account Factory - An Account Factory is a configurable account template that helps to standardize the provisioning of new accounts with pre-approved account configurations. AWS Control Tower offers a built-in Account Factory that helps automate the account provisioning workflow in your organization. For more information, see Provision and manage accounts with Account Factory.

    Dashboard - The dashboard offers continuous oversight of your landing zone to your team of central cloud administrators. Use the dashboard to see provisioned accounts across  your enterprise, guardrails enabled for policy enforcement, guardrails enabled for continuous detection of policy non-conformance , and noncompliant resources organized by accounts and OUs.

...

Configuration, Governance, and Extensibility

    Automated account configuration: AWS Control Tower automates account deployment and enrollment by means of an Account Factory (or "vending machine"), which is bult as an abstraction on top of provisioned products in AWS Service Catalog. The Account Factory can create and enroll AWS accounts, and it automates the process of applying guardrails and policies to those accounts.

    Centralized governance: By employing the capabilities the cappabilities of AWS Organizations, AWS Control Tower sets up a framework that ensures consistent compliance and governance across your multi-account environment. The AWS Organizations service provides essential capabilities for managing a multi-account environment, including central governance and management of accounts, creation of accounts from APIs, and service control policies (SCPs).

    Extensibility: You can build or extend your own AWS Control Tower environment by working directly in AWS Organizations, as well as in the AWS Control Tower console. You can see your changes reflected in AWS Control Tower after you register your existing organizations and enroll your existing accounts into AWS Control Tower. YOu can update your AWS Control Tower landing zone to reflect your changes. If your workloads require further advanced capabilities, you can leverage other AWS partner solutions along wiht AWS Control Tower

...

https://docs.aws.amazon.com/controltower/latest/userguide/how-control-tower-works.html
...

Structure of an AWS Control Tower Landing Zone

The structure of a landing zone in AWS Control Tower is as follows:

    Root--The parent that continas all other OUs in your landing zone.
    Security OU--This OU contians the Log Archive and Audit accounts. These accounts often are referred to as shared accounts. You can choose customized names for these shared accounts when you launch your landing zone. However, they cannot be renamed later.
    Sandbox OU--The Sandbox OU is created when you launch your landing zone, if you enable it. This and other registered OUs contain the enrolled accounts that your users work with to perform their AWS workloads.
    AWS SSO directory--This directory houses your AWS SSO users. It defines the scope of permissions for each AWS SSO user.
    AWS SSO users--These are the identifiers that yoru users can assume to perform their AWS workloads in your landing zone.


What happens when you set up a landing zone?

...

Safely Managing Resources Within your AWS Control Tower Landing Zone and Accounts

    When you create your landing zone, a number of AWS resources are created. To use AWS Control Tower, you must not modify or delete these AWS Control Tower managed resources outside of the supported methods described in this guide. Deleting or modifying these resources will cause your landing zone to enter an unknown state. For details, see Guidance for creating and modifying AWS Control Tower resources.

    When you enable optional guardrials (those with strongly recommended or elective guidance), AWS Control Tower creates AWS resources that it manages in your accounts. Do not modify or delete resources creatd by AWS Control Tower. Doing so can result in the guardrails entering an unknown state. For more information, see Guardrail reference.

What are the Shared Accounts?

In AWS Control Tower, three shared accounts in your landing zone are provisioned automatically during setup: the management account, the log archive account, and the audit account.

What is the management account?

This is the account that you created specifically for your landing zone. This account is used for billing for everything in your landing zone. It's also used for Account Factory provisioning for accounts, as well as to manage OUs and guardrails.

Note: It is not recommended to run any type of production workloads from an AWS ControlTower management account. Creating a separate AWS Control Tower account to run your workloads.

When you set up your landing zone, the following AWS resources are created within your management account.

AWS service | Resource type | Resource name
AWS Organizations | Accounts | audit, log archive
AWS Organizations | OUs | Security, Sandbox
AWS organizations
...

What is the log archive account?

This account works as a repository for logs of the API activities and resource configurations from all accounts in the landing zone.

When you set up your landing zone, the following AWS resources are created within your log archive account.

...


What is the audit account?

The audit account is a restricted account that's designed to give your security and compliance teams read and write access to all accounts in your landing zone. From the audit account, you have programmatic access to review accounts, by means of a role that is granted to Lambda functions only. The audit account does not allow you to log in to other accounts manually. For more information about Lambda functiosn and roles, see Configure a Lambda function to assume a role from another AWS account.

When you set up your landing zone, the following AWS resources are created within your audit account.

...


Detective guardrails detect specific events when they occur and log the action in CloudTrail. For example, the strongly recommended guardrail called Detect Whether Encryption is Enabled for Amazon EBS Volumes Attached to Amazon EC2 Instances detects whether an unencrypted Amazon EBS volume is attached to an EC2 instance in your landing zone.

For those who are familiar with AWS: In AWS Control Tower preventative guardrails are implemented with Service Control Policies (SCPs). Detective guardrails are implemented with AWS Config rules.

Related Topics:
    Guardrails in AWS Control Tower
    Detect and resolve drift in AWS Control Tower

How AWS Control Tower Works With StackSets

AWS Control Tower uses AWS CloudFormation StackSets to set up resources in your accounts. Each Stack Set has StackInstances that correspond to accounts, and to AWS Regions per account. AWS Control Tower deploys one stack set per instance per account per Region.

AWS Control Tower applies updates to certain accounts and AWS Regions selectively, absed on CloudFormation parameters. When updates are applied to some stack instances, other stack instances may be left in Outdated status. This behavior is expected and normal.

When a stack instance goes into Outdated status, it usually means that the stack corresponding to that stack instance is not aligned with the latest template in the stack set. The stack remains in the older template, so it might not include the latest resources or parameters. THe stack is still completely useable.

Here's a quick summary of what behavior to expect, based on AWS CloudFormation parameters there are specified during an update

If the stack set update includes changes to the template (that is, if the TemplateBody or TemplateURL properties are specified), or if the Parameters property is specified, AWS CloudFormation marks all stack instances with a status of Outdated prior to updating the stack instances in the specified accounts and AWS Regions. If the stack set update does not include changes to the template or parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while leaivng all other stack instances with their existing stack instance status. To update all of the stack instances associated with a stack set, do not specify the Accounts or Regions properties.

For more information, see Update your Stack Set in the AWS CloudFormation User Guide.

...

https://docs.aws.amazon.com/controltower/latest/userguide/planning-your-deployment.html

Plan your AWS Control Tower landing zone

WHen you go through the setup process, AWS Control Tower launches a key resource associated with your accoung, called a landing zone, which serves as a home for your organizations and their accounts.

Note: You have one landing zone per organization.

For information about some best practices to follow when you plan and set up your landing zone, see AWS multi-account stragety for your AWS Contol Tower landing zone.

Ways to set up AWS Control Tower

You can set up AWS Control Tower landing zone in an existing organization, or you can start by creating a new organization that contains your AWS Control Tower landing zone.

    Launch AWS Contorl Tower in an Existing Organization:

[I don't think that this page is going to be too important because the landing zone is already set up; going to skim though.]

...

About Extending Governance: Extending governance applies to specific OUs and accounts within a single organization that's already registered with AWS Control Tower, which means that a landing zone already exists for that organization. Extending governance means that AWS Control Tower guardrails are extended so that their constraints apply to the specific OUs and accounts within that registered organization. In this case, you're not launching a new landing zone, you're only expanding teh current landing zone for your organization.

Important:
    Special consideration: If you currently are using the AWS Landing Zone solution (ALZ) for AWS Organizations, check with your AWS solutions architect before you try to enable AWS Control Tower for your organization. AWS Control Tower cannot perform pre-checks that determine wheter AWS Control Tower  may interfer with your current landing zone deployment. For more information, see Walkthrough: Move form ALZ to AWS Control Tower. Also, for information about moving accounts from one landing zone to anohter, see What if the account does not meet the prerequisites?

https://docs.aws.amazon.com/controltower/latest/userguide/terminology.html

Terminology

Here's a quick review of some terms you'll see in AWS Control Tower documentation.

First, it's good to know that AWS Control Tower shares a lot of terminology with the AWS Organizations service, includign the terms organization and Organizational Unit (OU), which appear throughout this document.

    For more information about organizations and OUs, see AWS Organizations terminology and concepts. If you're new to AWS Control Tower, that terminology is a good place to begin.

    AWS Organizations is an AWS service that helps you centrally govern your environment as you grow and scale your workloads on AWS. AWS Control Tower relies on AWS Organizations to create accounts, to enforce preventative guardrails at the OU level, and to provide centralized billing.

    An AWS Account Factory account is an AWS account provisioned using Account Factory in AWS Control Tower. Sometimes, Account Factory is referred to informally as a "vending machine" for accounts.

    Your AWS Control Tower home Region is the AWS Region in which your AWS Control Tower Landing zone was deployed. You can view your home Region in your landing zone settings.

    AWS Service Catalog allows you to manage commonly deployed IT services, centrally. In the context of this document, Account Facotry uses AWS Service Catalog to provision new AWS accounts.

    AWS CloudFormation StackSets are a type of resource that extends the functionality of stakcs so that you can create, update, or delete stakcs across multiple accounts and Regions with a single operation and a single CloudFormation template.






















































end of copii

What are automation building blocks, exactly?
What is the Pick Branch Activity?
AWS related questsions:
    What guardrails do we have in place?
    Do we have an account factory?
    How does Control Tower unify billing?
    https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html
