(in_dtCurrentSheet.rows(j).item(0).ToString <> "") and (in_dtCurrentSheet.rows(j).item(7).tostring.Replace("$", "").IsNumeric or in_dtCurrentSheet.rows(j).item(7).tostring.contains("$"))

<wnd app='excel.exe' cls='XLMAIN' title='123BotOutput.xls  -  Compatibility Mode - Excel' />
<uia automationid='123BotOutput.xls' cls='ExcelBookTabControl' name='123BotOutput' />
<uia automationid='SheetTab' name='{{strSheetName}}' role='Sheet Tab' />

List<string>(2)
{
  "H18",
  "J25"
}

The following cards


These cards got reassigned to the Verkada user Lost Cards last weekend when Eric and Jay were cleaning up the users and making sure that users had only one card assigned.
191
    Deactivated
152
    Deactivated
47
    Deactivated
10
    Deactivated

I'm looking into which account exactly they belonged to. Going to take more time.


List of the something something

List of the URLs to find the reports that need updates on them.

New Dictionary(of String, String)
{
{"Table HD_Ticket 2022",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=&SEARCH_SELECTION_TEXT=table+HD_Ticket+2022&SEARCH_SELECTION=table+HD_Ticket+2022"},
{"Table USER",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=&SEARCH_SELECTION_TEXT=table+USER&SEARCH_SELECTION=table+USER"},
{"Table HD_WORK 2022",
"http://support.hemic.com/adminui/analysis_report_list.php?CATEGORY_ID=Service+Desk&SEARCH_SELECTION_TEXT=table+HD_WORK+2022&SEARCH_SELECTION=table+HD_WORK+2022"}
}


Tips to make better workflows using UiPath

RPA is taking hte world by storm. It allows the companies to automate mundane taks so that their resources could focus on something more important. This is beneficial not only for the company but also allows the employee to get their hands dirty in other areas of the industry as well.

Tools such as uiPath not only...

Here are some of the tips that could help you make yoru workflows more efficient -

#1 Using Global variables.

If you have any experience in programming, then you know the importance of global variables. While creating workflows we usually pass all the required variables as arguments to different workflows. The flaw with this approach is that if there is a small change in arguments of any one of the workflow, then all other workflows where it was called have to be modified.

In order to introduce global variable functionality in our workflow, we can use the Getter Setter activity.

It's looking like that's not in modern... Which is NOT a good sign!!!!


https://docs.uipath.com/studio/docs/test-activities

Test Activities

The Test Activity context menu option of the Designer panel is used for running a test of the currently selected activity. When clicked, the Locals panel opens displaying the variables and arguments in scope.

Test Activity can be used in two ways:

    Add default values to properties and test

    Add arguments and/or properties to activity properties and use the Local panel to add values after clickign the Test Activity option.

Double-click on the value field of a variable or argument or click the edit icon in the Locals pane, and add a new value. Next, click Step Into to focus and execute the activity, and monitor the variable or argument's value in the Locals panel.

The same is available when clickign Continue, but the variables are not visible in the Locals Panel.

Please take into consideration that dynamic checks when variabels depend on other variables that are defined later are not supported.

Execution logs generated by the Test Activity action are visible in the Output panel. Exceptions in Studio can be bubbled up, which means that the exception may be passed to parent containers in case it may be handled by them.

The Test Activity option is not available during debugging.

Example of Using Test Activity

For the If Activity, we created a process that asks the user for two numbers, checks to see if one is divisible by the otgher, and depending on the result, displays a different message in the Output panel.

To check the behavior of the If activity defined in the process, use the Test Activity option, as illustrated below:

The Test Activity action places the activity in the debugger and asks you for values to variables. Once provided, click the Continue button for the debugging process to continue. In this particular case, a message was written in the Output panel with the correct answer, which means that the expressions written in the If activity were correct.

Create Test Bench

The Create Test Bench option allows for the creation of automation building blocks, which can then be tested and added to the final workflow.

It is sued for testing activities, working with variables, and debugging the process. All this is done in a test bench workflow, a temporary sequence that's not part of the current proejct and that is discarded when closed.

The Create Test Bench option is similar to the Test Activity option, with the exception that the latter is contained and defined in an actual workflow.

To use the Create Test Bench option, go to the Activities panel search bar or use [the] Ctrl + Alt + F keyboard shortcut. Type the name of hte activity and right-click to open the context menu.

Select Create Test Bench[,] and the activity is automatically added to a sequence fiel not included in your project. From there yu can add other activities, chagne their default properties, and debug the process. The Output panel displays any logs or error found during debugging.

To save the file to your project, simplu use the ribbon option Save as, add a file name, and save it to the same file path as your project.

Please note that teh Create Test Bench does not work with the Pick Branch activity.

Run to this Activity

The Run to this Activity option is avialable when right-clicking an activity in the Designer panel.

This option starts the debugging process and pauses before teh selected activity is executed while highlighting it in the panel. If Run to this Activity is triggered when debugging is already paused, the execution continues until the activity is reached.

Run from this Activity

The Run from this Activity context menu option enters debugging in a paused state, allowing you to make changes to teh values of variables and arguments from the Locals Panel. Press Continue to start debugging or use actions such as Step Into, Step Over, Step Out.

Note:
An error occurs if you use Run from this Activity for an activity added inside one of the following container activities: Try Catch, Switch, Parallel, Pick, Trigger Scope, or Retry Scope.



https://docs.uipath.com/studio/docs/debugging-actions

Debugging Actions

Debugging of a single file or the whole project can be performed both form the Design or Debug ribbon tabs. However, the debugging process is not available if hte project files have validation errors.

Step Into

Use Step Into to debug activities one at a time. When this action is triggered, the debugger opens and highlights hte activity before it is executed.

When Step Into is used with Invoke Workflow File activities, the workflow is opened in a new tab in ReadOnly mode and each activity is executed one by one.

The keyboard shortcut for Step Into is F11.

Step Over

Unlike the Step Into action, Step Over does not open the current container. When used, the action debugs the next activity, highlighting containers (such as flowcharts, sequences or Invoke Workflow File activities) without opening thme.

This action comes in handy for skipping analysis of large containers which are unlikely to trigger any issues during execution.

Step Over is available using the F10 keybaord shortcut.

Step Out

As the name suggests, this action is used for stepping out and pausing the execution at the level of the current container. Step Out completes the execution activities of the current container before pausing the debugging. This option works well with nested sequences.

Step out is available using the Shift + F11 keyboard shortcut.

Retry

Retry re-executes the previous activity, and throws the exception if it's encountered again. The activity which threw the exception is highlighted and details about the error are shown in the Locals adn Call Stack Panels.

Ignore

The Ignore action can be used to ignore an encountered exception and continue the execution from the next activity so that the rest of the workflow can be debugged.

This action is useful when jumping over the activity that threw the exception and continuing debugging the remaining part of the project.

Restart

Restart is available after an exception was thrown and the debug process is paused. The action is used after restarting the debugging process from the first activity of the project. Use Slow Step to slow down the debugging speed and properly inspect activities as they are executed.

Please take into consideration that when using this option after using hte Run from this Activity action, the debugging is restarted from the previously indicated activity.

Break

Break allows you to pause the debugging process at any given moment. The activity which is being debugged remains highlighted when paused. Once this happens, you can choose to Continue, Step Into, Step Over, or Stop the debugging process.

It is recommended to use Break along with Slow Step so that you know exactly when debugging needs to be paused.

An alternative to using Slow Step in this situation is to keep an eye on the Output panel an duse Break on the activity that is currently being debugged.

Focus

Focus Execution Point helps you return to the current breakpoint or the activity that caused an error during debugging. The Focus button is used after navigating through the process, as an easy way to return to the activity that caused the error and resumes the debugging process.

Alternatively, when debugging is paused because a breakpoint was reached, Focus can be used for returning to said breakpoint, after navigating through activities contained in the automation process.

A third case is when the debugging is paused either after usign Step Into or Step Over and then navigating through the process. In this case, Focus returns to teh activity that paused the debugging process.

From the Breakpoints context menu, you can select focus to highlight the activity with the breakpoint.

Slow Step

Slow Step enables you to take a closer look at any activity during debugging. While this action is enabled, activities are highlighted in the debugging process. Moreover, containers such as flowcharts, sequences, or Invoke Workflow File activities are opened. This is simiar to using Step Into, but without having to pause the debugging process.

Slow Step can be activated both before or during the debugging process. Activating teh action does not pause debugging.

Although called Slow Step, the action comes with 4 different speeds. The selected speed step runs the debugging process slower than the previous one. For example, debugging with Slow Step at 1x runs it the slowest, and fastest at 4x. In other words, the speed dictates how fast teh debugger jumps from one activity to the next.

Each time you click Slow Step the speed changes by one step. You can easily tell by the icon, which updates accordingly.

Execution Trail

The Execution Trail ribbon button is disabled by default. When enabled, it shows the exact execution path at debugging. As the process is executed, each activity is highlighted and marked in the Designer panel, showing you the execution as it happens.

    executed activities are marked and highlighted in green.

    activities that were not executed are not marked in any way.

    activities that threw an exception are marked and highlighted in red.

https://docs.uipath.com/activities/docs/retry-scope

Retry Scope

UiPath.Core.Activities.RetryScope

Retries the contained activities as long as the condition  is not met or an error is thrown.

Important! Due to internal changes, this activity will no longer be visible in the Favorites list when upgrading to v20.4 or newer, if it was added to the Favorites list with a 19.4 or older version of UiPath.System.Activities.

Properties
Options
    NumberofRetries - The number of times that teh sequence is to be retried.

    RetryInterval - Specifies the amount of time (in seconds) between each retry.

Common
    DisplayName - The display name of this activity
    ContinueOnError - Specifies if the automation should continue even when the activity throws an error. This field only supports Boolean values (True, False). The default value is False. As a result, if the field is blank and an error is thrown, the execution of the project stops. If the value is set to True, the execution of the project continues regardless of any error.

Note:
If this activity is included in Try Catch and the value of ContinueOnError is True, no error is caught when the project is executed.

Misc
Private - If selected, the values of variables and arguments are no longer logged at Verbose level.

The Retry Scope activity is used for catching and handling an error, which is why it's similar to the Try Catch one. The following workflow attempts to open the Notepad window 3 times and uses the condition set in the Retry Scope activity to stop the loop.

    1. Create a new sequence and add the Retry Scope activity.
    2. In the Properties panel, leave the default NumberOfRetries of 3 and the Retry Interval of 5. This means that we attempt to open the Notepad window 3 times and the interval between tries is 5 seconds.
    3. In the Action section, add an Assign activity.
    4. Create a GernericValue variable, named for example Random and add it to the To field of the Assign activity.
    5. Add the Now.Millisecond mod 5 value to the variable by adding it to the Value field of the Assign activity.
    6. Add an if activity and as a condition enter Random <> 0. This means that you check if your variable is different than 0.
    7. In the Then section of this activity (the condition above is true):
        Add a Message Box stating "Notepad Window failed to start.".
        Under the Message Box, add a Throw activity to throw an error.
        Type in New System.Exception("Notepad failed to start.") in the Exception field, under Properties.
    8. In the Else section of the If activity (the condition above is false):
        Add an Open Application activity and indicate Notepad on the screen. Provide the full path of the Notepad executable file in the FileName field part of Properties.
    9. To exit the loop, add an Element Exists activity in the Condition section of Retry Scope and indicate the Notepad window.

This workflow simulates a failing Notepad window. If the value of the Random variable is 0 three times in a row, the "Notepad Window Failed to start" message is displayed every time and the entire workflow fails with the "Notepad failed to start" error. The latter message is the one added in the Throw activity.

If the value of the Random variable is 0, the Robot opens Notepad and because the exist condition of this loop is to find the Notepad window, teh workflow is successfully completed.














































end of copii

What are automation building blocks, exactly?
What is the Pick Branch Activity?
