






11
UiPath Advanced Developer
In the Robotic Enterprise Framework, the global variables are those variables whose scope is the main program, or main workflow.
They can be found in the main.xaml workflow file, by first clicking anywhere inside the main
state machine and then clicking the variables pane. Table 2 is a list of the project’s global
variables.



12
UiPath Advanced Developer
The following are the global variables in the Robotic Enterprise Framework with datatype
TransactionItem QueueItem
TransactionData
SystemError Exception
BusinessRuleException BusinessRuleException
TransactionNumber Int32
Config Dictionary(x:String, x:Object)
RetryNumber Int32
TransactionID string
TransactionField1 string
TransactionField2 string


13
UiPath Advanced Developer
In the Robotic Enterprise Framework:
InitAllSettings.xaml workflow

This workflow outputs a settings Dictionary with key/value pairs to be used in the project.
Settings are read from local config file then fetched from Orchestrator assets. Assets will
overwrite the config file settings



14
UiPath Advanced Developer
Robotic Enterprise Framework:

Init Transitions
At the end of the Init State we should have read our configuration file into the dictionary Config,
a global variable, cleaned the working environment by calling the KillAllApplications.xaml
workflow only during startup, and initialised all the applications we will work with.



15
UiPath Advanced Developer
Robotic Enterprise Framework:

Get Transaction Data State
GetTransactionData.xaml workflow
Description: Get data from spreadsheets, databases, email, web API or UiPath server queues. If
no new data, set out_TransactionItem to Nothing.



16
UiPath Advanced Developer
REFramework
Process Transaction State

Process.xaml workflow
In this file all other process specific files will be invoked. If an application exception occurs, the
current transaction can be retried. If a BRE is thrown, the transaction will be skipped. Can be a
flowchart or sequence. If the process is simple, the developer should split the process into
subprocesses and call them, one at a time, in the Process.xaml workflow.



17
UiPath Advanced Developer
Robotic Enterprise framework
SetTransactionStatus.xaml workflow

This workflow sets the TransactionStatus and Logs that status and details in extra Logging
Fields.
The flowchart branches out into the three possible Transaction Statuses: Success, Business
Exception and Application Exception.



18
UiPath Advanced Developer
REFramework:
TakeScreenshot.xaml workflow

Usage: Set in_Folder to the folder Name where you want to save the screenshot. Alternatively,
supply the full path including file name in io_FilePath. Description: This workflow captures a
screenshot and logs it's name and location. It then saves it. If io_FilePath is empty, it will try to
save the picture in in_Folder. It uses .png extension.



19
UiPath Advanced Developer
Robotic Enterprise Framework:

Process Transaction Transitions

If we have an Application Exception we
close all programs, kill them if they fail to
close, take a screenshot at the moment
the exception happened, and go to Init,
where we will reinitialize our working
environment and begin anew from the
transaction that failed (retrying until we
have reached the maximum retry limit)



20
UiPath Advanced Developer
REFramework:
GetAppCredentials.xaml workflow

Usage: Change in_Credential to a previously created Orchestrator asset or a Windows
credential and use outputs out_Username and out_Password.

Description: This workflow securely fetches or creates and uses a set of credentials defined at
it's input. It first tries to fetch them from Orchestrator. Failing that, it tries to fetch them from the
Windows credential manager. If they do not exist, it creates them and then outputs them.



21
UiPath Advanced Developer
Robotic Enterprise Framework:
Breaking down a log message

in_Config("LogMessage_ApplicationException").ToString+" Retry: "+io_RetryNumber.ToString+".
"+in_SystemError.Message+" at Source: "+in_SystemError.Source

The first part of the message, in_Config("LogMessage_ApplicationException").ToString , is read from
the Config dictionary, which enables easy modification if it is required. It is located in the
Constants sheet of the Config excel file, and its content at the moment of writing this is “System
exception.”
Next we append the constant string “ Retry: “ to which we append the value of the
io_RetryNumber, that is the retry we have reached.
Next we append the in_SystemError message and source,



22
UiPath Advanced Developer




23
UiPath Advanced Developer




24
UiPath Advanced Developer




25
UiPath Advanced Developer




26
UiPath Advanced Developer




27
UiPath Advanced Developer




28
UiPath Advanced Developer




29
UiPath Advanced Developer




30
UiPath Advanced Developer





Process finished with exit code 0
